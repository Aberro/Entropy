//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:/Repo/Mods/Stationeers/Entropy/Assets/Scripts/MIPSParser/MIPS.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
public partial class MIPSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, COMMENT=3, ALIAS=4, DEFINE=5, REGISTER=6, DEVICE=7, IDENTIFIER=8, 
		NUMBER=9, HEX=10, COMMA=11, COLON=12, NEWLINE=13, WS=14;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_label = 2, RULE_define = 3, RULE_alias = 4, 
		RULE_name = 5, RULE_define_target = 6, RULE_alias_target = 7, RULE_instruction = 8, 
		RULE_operation = 9, RULE_operand = 10, RULE_comment = 11, RULE_register = 12, 
		RULE_device = 13, RULE_hash = 14;
	public static readonly string[] ruleNames = {
		"program", "line", "label", "define", "alias", "name", "define_target", 
		"alias_target", "instruction", "operation", "operand", "comment", "register", 
		"device", "hash"
	};

	private static readonly string[] _LiteralNames = {
		null, "'HASH(\"'", "'\")'", null, "'alias'", "'define'", null, null, null, 
		null, null, "','", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "COMMENT", "ALIAS", "DEFINE", "REGISTER", "DEVICE", 
		"IDENTIFIER", "NUMBER", "HEX", "COMMA", "COLON", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MIPS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MIPSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MIPSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MIPSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MIPSParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MIPSParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			line();
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 31;
				Match(NEWLINE);
				State = 32;
				line();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MIPSParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MIPSParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 38;
				Match(WS);
				}
				break;
			}
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 41;
				label();
				}
				break;
			}
			State = 45;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 44;
				Match(WS);
				}
				break;
			}
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 304L) != 0)) {
				{
				State = 47;
				instruction();
				}
			}

			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 50;
				Match(WS);
				}
			}

			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 53;
				comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MIPSParser.COLON, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 4, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			name();
			State = 57;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(MIPSParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MIPSParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MIPSParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Define_targetContext define_target() {
			return GetRuleContext<Define_targetContext>(0);
		}
		public DefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitDefine(this);
		}
	}

	[RuleVersion(0)]
	public DefineContext define() {
		DefineContext _localctx = new DefineContext(Context, State);
		EnterRule(_localctx, 6, RULE_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(DEFINE);
			State = 60;
			Match(WS);
			State = 61;
			name();
			State = 62;
			Match(WS);
			State = 63;
			define_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(MIPSParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MIPSParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MIPSParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_targetContext alias_target() {
			return GetRuleContext<Alias_targetContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 8, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(ALIAS);
			State = 66;
			Match(WS);
			State = 67;
			name();
			State = 68;
			Match(WS);
			State = 69;
			alias_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MIPSParser.IDENTIFIER, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 10, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HashContext hash() {
			return GetRuleContext<HashContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MIPSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(MIPSParser.HEX, 0); }
		public Define_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterDefine_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitDefine_target(this);
		}
	}

	[RuleVersion(0)]
	public Define_targetContext define_target() {
		Define_targetContext _localctx = new Define_targetContext(Context, State);
		EnterRule(_localctx, 12, RULE_define_target);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				hash();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				Match(NUMBER);
				}
				break;
			case HEX:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75;
				Match(HEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeviceContext device() {
			return GetRuleContext<DeviceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MIPSParser.IDENTIFIER, 0); }
		public Alias_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterAlias_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitAlias_target(this);
		}
	}

	[RuleVersion(0)]
	public Alias_targetContext alias_target() {
		Alias_targetContext _localctx = new Alias_targetContext(Context, State);
		EnterRule(_localctx, 14, RULE_alias_target);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REGISTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				register();
				}
				break;
			case DEVICE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79;
				device();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 80;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefineContext define() {
			return GetRuleContext<DefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MIPSParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MIPSParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 16, RULE_instruction);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				define();
				}
				break;
			case ALIAS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				alias();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				operation();
				State = 108;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 86;
					Match(WS);
					State = 87;
					operand();
					State = 106;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						State = 88;
						Match(WS);
						State = 89;
						operand();
						State = 104;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
						case 1:
							{
							State = 90;
							Match(WS);
							State = 91;
							operand();
							State = 102;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
							case 1:
								{
								State = 92;
								Match(WS);
								State = 93;
								operand();
								State = 100;
								ErrorHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
								case 1:
									{
									State = 94;
									Match(WS);
									State = 95;
									operand();
									State = 98;
									ErrorHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
									case 1:
										{
										State = 96;
										Match(WS);
										State = 97;
										operand();
										}
										break;
									}
									}
									break;
								}
								}
								break;
							}
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MIPSParser.IDENTIFIER, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 18, RULE_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeviceContext device() {
			return GetRuleContext<DeviceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HashContext hash() {
			return GetRuleContext<HashContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MIPSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(MIPSParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MIPSParser.IDENTIFIER, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 20, RULE_operand);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REGISTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				register();
				}
				break;
			case DEVICE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				device();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 116;
				hash();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 117;
				Match(NUMBER);
				}
				break;
			case HEX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 118;
				Match(HEX);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 119;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MIPSParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 22, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegisterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGISTER() { return GetToken(MIPSParser.REGISTER, 0); }
		public RegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_register; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterRegister(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitRegister(this);
		}
	}

	[RuleVersion(0)]
	public RegisterContext register() {
		RegisterContext _localctx = new RegisterContext(Context, State);
		EnterRule(_localctx, 24, RULE_register);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(REGISTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE() { return GetToken(MIPSParser.DEVICE, 0); }
		public DeviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_device; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterDevice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitDevice(this);
		}
	}

	[RuleVersion(0)]
	public DeviceContext device() {
		DeviceContext _localctx = new DeviceContext(Context, State);
		EnterRule(_localctx, 26, RULE_device);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(DEVICE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MIPSParser.IDENTIFIER, 0); }
		public HashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.EnterHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIPSListener typedListener = listener as IMIPSListener;
			if (typedListener != null) typedListener.ExitHash(this);
		}
	}

	[RuleVersion(0)]
	public HashContext hash() {
		HashContext _localctx = new HashContext(Context, State);
		EnterRule(_localctx, 28, RULE_hash);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(T__0);
			State = 129;
			Match(IDENTIFIER);
			State = 130;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,14,133,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,1,0,1,0,5,0,34,8,0,10,0,12,0,37,9,0,1,1,3,1,40,8,1,1,1,3,1,43,8,1,
		1,1,3,1,46,8,1,1,1,3,1,49,8,1,1,1,3,1,52,8,1,1,1,3,1,55,8,1,1,2,1,2,1,
		2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,
		3,6,77,8,6,1,7,1,7,1,7,3,7,82,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,3,8,99,8,8,3,8,101,8,8,3,8,103,8,8,3,8,105,8,8,
		3,8,107,8,8,3,8,109,8,8,3,8,111,8,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
		10,3,10,121,8,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
		0,0,15,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,0,0,141,0,30,1,0,0,0,2,
		39,1,0,0,0,4,56,1,0,0,0,6,59,1,0,0,0,8,65,1,0,0,0,10,71,1,0,0,0,12,76,
		1,0,0,0,14,81,1,0,0,0,16,110,1,0,0,0,18,112,1,0,0,0,20,120,1,0,0,0,22,
		122,1,0,0,0,24,124,1,0,0,0,26,126,1,0,0,0,28,128,1,0,0,0,30,35,3,2,1,0,
		31,32,5,13,0,0,32,34,3,2,1,0,33,31,1,0,0,0,34,37,1,0,0,0,35,33,1,0,0,0,
		35,36,1,0,0,0,36,1,1,0,0,0,37,35,1,0,0,0,38,40,5,14,0,0,39,38,1,0,0,0,
		39,40,1,0,0,0,40,42,1,0,0,0,41,43,3,4,2,0,42,41,1,0,0,0,42,43,1,0,0,0,
		43,45,1,0,0,0,44,46,5,14,0,0,45,44,1,0,0,0,45,46,1,0,0,0,46,48,1,0,0,0,
		47,49,3,16,8,0,48,47,1,0,0,0,48,49,1,0,0,0,49,51,1,0,0,0,50,52,5,14,0,
		0,51,50,1,0,0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,55,3,22,11,0,54,53,1,0,
		0,0,54,55,1,0,0,0,55,3,1,0,0,0,56,57,3,10,5,0,57,58,5,12,0,0,58,5,1,0,
		0,0,59,60,5,5,0,0,60,61,5,14,0,0,61,62,3,10,5,0,62,63,5,14,0,0,63,64,3,
		12,6,0,64,7,1,0,0,0,65,66,5,4,0,0,66,67,5,14,0,0,67,68,3,10,5,0,68,69,
		5,14,0,0,69,70,3,14,7,0,70,9,1,0,0,0,71,72,5,8,0,0,72,11,1,0,0,0,73,77,
		3,28,14,0,74,77,5,9,0,0,75,77,5,10,0,0,76,73,1,0,0,0,76,74,1,0,0,0,76,
		75,1,0,0,0,77,13,1,0,0,0,78,82,3,24,12,0,79,82,3,26,13,0,80,82,5,8,0,0,
		81,78,1,0,0,0,81,79,1,0,0,0,81,80,1,0,0,0,82,15,1,0,0,0,83,111,3,6,3,0,
		84,111,3,8,4,0,85,108,3,18,9,0,86,87,5,14,0,0,87,106,3,20,10,0,88,89,5,
		14,0,0,89,104,3,20,10,0,90,91,5,14,0,0,91,102,3,20,10,0,92,93,5,14,0,0,
		93,100,3,20,10,0,94,95,5,14,0,0,95,98,3,20,10,0,96,97,5,14,0,0,97,99,3,
		20,10,0,98,96,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,94,1,0,0,0,100,
		101,1,0,0,0,101,103,1,0,0,0,102,92,1,0,0,0,102,103,1,0,0,0,103,105,1,0,
		0,0,104,90,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,88,1,0,0,0,106,
		107,1,0,0,0,107,109,1,0,0,0,108,86,1,0,0,0,108,109,1,0,0,0,109,111,1,0,
		0,0,110,83,1,0,0,0,110,84,1,0,0,0,110,85,1,0,0,0,111,17,1,0,0,0,112,113,
		5,8,0,0,113,19,1,0,0,0,114,121,3,24,12,0,115,121,3,26,13,0,116,121,3,28,
		14,0,117,121,5,9,0,0,118,121,5,10,0,0,119,121,5,8,0,0,120,114,1,0,0,0,
		120,115,1,0,0,0,120,116,1,0,0,0,120,117,1,0,0,0,120,118,1,0,0,0,120,119,
		1,0,0,0,121,21,1,0,0,0,122,123,5,3,0,0,123,23,1,0,0,0,124,125,5,6,0,0,
		125,25,1,0,0,0,126,127,5,7,0,0,127,27,1,0,0,0,128,129,5,1,0,0,129,130,
		5,8,0,0,130,131,5,2,0,0,131,29,1,0,0,0,17,35,39,42,45,48,51,54,76,81,98,
		100,102,104,106,108,110,120
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
