//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:/Repo/Mods/Stationeers/Entropy/Assets/Scripts/MIPSParser/MIPS.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
public partial class MIPSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, COMMENT=3, ALIAS=4, DEFINE=5, REGISTER=6, DEVICE=7, IDENTIFIER=8, 
		NUMBER=9, HEX=10, COMMA=11, COLON=12, NEWLINE=13, WS=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "COMMENT", "ALIAS", "DEFINE", "REGISTER", "DEVICE", "IDENTIFIER", 
		"NUMBER", "HEX", "COMMA", "COLON", "NEWLINE", "WS"
	};


	public MIPSLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MIPSLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'HASH(\"'", "'\")'", null, "'alias'", "'define'", null, null, null, 
		null, null, "','", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "COMMENT", "ALIAS", "DEFINE", "REGISTER", "DEVICE", 
		"IDENTIFIER", "NUMBER", "HEX", "COMMA", "COLON", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MIPS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MIPSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,162,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,5,2,42,8,2,10,2,12,2,45,9,
		2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,4,5,61,8,5,11,
		5,12,5,62,1,5,1,5,1,5,3,5,68,8,5,1,5,3,5,71,8,5,1,5,1,5,3,5,75,8,5,1,6,
		1,6,5,6,79,8,6,10,6,12,6,82,9,6,1,6,1,6,1,6,3,6,87,8,6,1,6,3,6,90,8,6,
		1,6,1,6,3,6,94,8,6,1,6,1,6,1,6,1,6,3,6,100,8,6,1,6,3,6,103,8,6,3,6,105,
		8,6,1,7,3,7,108,8,7,1,7,5,7,111,8,7,10,7,12,7,114,9,7,1,8,3,8,117,8,8,
		1,8,4,8,120,8,8,11,8,12,8,121,1,8,1,8,4,8,126,8,8,11,8,12,8,127,3,8,130,
		8,8,1,8,1,8,3,8,134,8,8,1,8,4,8,137,8,8,11,8,12,8,138,3,8,141,8,8,1,9,
		1,9,4,9,145,8,9,11,9,12,9,146,1,10,1,10,1,11,1,11,1,12,3,12,154,8,12,1,
		12,1,12,1,13,4,13,159,8,13,11,13,12,13,160,0,0,14,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,1,0,22,2,0,72,72,104,
		104,2,0,65,65,97,97,2,0,83,83,115,115,2,0,10,10,13,13,2,0,76,76,108,108,
		2,0,73,73,105,105,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,
		2,0,78,78,110,110,2,0,82,82,114,114,1,0,48,54,3,0,49,57,65,65,97,97,2,
		0,80,80,112,112,1,0,49,57,2,0,66,66,98,98,3,0,65,90,95,95,97,122,5,0,46,
		46,48,57,65,90,95,95,97,122,1,0,48,57,2,0,43,43,45,45,3,0,48,57,65,70,
		97,102,2,0,9,9,32,32,187,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,
		0,3,36,1,0,0,0,5,39,1,0,0,0,7,46,1,0,0,0,9,52,1,0,0,0,11,74,1,0,0,0,13,
		93,1,0,0,0,15,107,1,0,0,0,17,116,1,0,0,0,19,142,1,0,0,0,21,148,1,0,0,0,
		23,150,1,0,0,0,25,153,1,0,0,0,27,158,1,0,0,0,29,30,7,0,0,0,30,31,7,1,0,
		0,31,32,7,2,0,0,32,33,7,0,0,0,33,34,5,40,0,0,34,35,5,34,0,0,35,2,1,0,0,
		0,36,37,5,34,0,0,37,38,5,41,0,0,38,4,1,0,0,0,39,43,5,35,0,0,40,42,8,3,
		0,0,41,40,1,0,0,0,42,45,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,6,1,0,0,
		0,45,43,1,0,0,0,46,47,7,1,0,0,47,48,7,4,0,0,48,49,7,5,0,0,49,50,7,1,0,
		0,50,51,7,2,0,0,51,8,1,0,0,0,52,53,7,6,0,0,53,54,7,7,0,0,54,55,7,8,0,0,
		55,56,7,5,0,0,56,57,7,9,0,0,57,58,7,7,0,0,58,10,1,0,0,0,59,61,7,10,0,0,
		60,59,1,0,0,0,61,62,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,70,1,0,0,0,
		64,71,5,48,0,0,65,67,5,49,0,0,66,68,7,11,0,0,67,66,1,0,0,0,67,68,1,0,0,
		0,68,71,1,0,0,0,69,71,7,12,0,0,70,64,1,0,0,0,70,65,1,0,0,0,70,69,1,0,0,
		0,71,75,1,0,0,0,72,73,7,2,0,0,73,75,7,13,0,0,74,60,1,0,0,0,74,72,1,0,0,
		0,75,12,1,0,0,0,76,80,7,6,0,0,77,79,7,10,0,0,78,77,1,0,0,0,79,82,1,0,0,
		0,80,78,1,0,0,0,80,81,1,0,0,0,81,89,1,0,0,0,82,80,1,0,0,0,83,90,5,48,0,
		0,84,86,5,49,0,0,85,87,7,11,0,0,86,85,1,0,0,0,86,87,1,0,0,0,87,90,1,0,
		0,0,88,90,7,14,0,0,89,83,1,0,0,0,89,84,1,0,0,0,89,88,1,0,0,0,90,94,1,0,
		0,0,91,92,7,6,0,0,92,94,7,15,0,0,93,76,1,0,0,0,93,91,1,0,0,0,94,104,1,
		0,0,0,95,102,5,58,0,0,96,103,5,48,0,0,97,99,5,49,0,0,98,100,7,11,0,0,99,
		98,1,0,0,0,99,100,1,0,0,0,100,103,1,0,0,0,101,103,7,14,0,0,102,96,1,0,
		0,0,102,97,1,0,0,0,102,101,1,0,0,0,103,105,1,0,0,0,104,95,1,0,0,0,104,
		105,1,0,0,0,105,14,1,0,0,0,106,108,7,16,0,0,107,106,1,0,0,0,108,112,1,
		0,0,0,109,111,7,17,0,0,110,109,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,
		112,113,1,0,0,0,113,16,1,0,0,0,114,112,1,0,0,0,115,117,5,45,0,0,116,115,
		1,0,0,0,116,117,1,0,0,0,117,119,1,0,0,0,118,120,7,18,0,0,119,118,1,0,0,
		0,120,121,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,129,1,0,0,0,123,
		125,5,46,0,0,124,126,7,18,0,0,125,124,1,0,0,0,126,127,1,0,0,0,127,125,
		1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,123,1,0,0,0,129,130,1,0,0,
		0,130,140,1,0,0,0,131,133,7,7,0,0,132,134,7,19,0,0,133,132,1,0,0,0,133,
		134,1,0,0,0,134,136,1,0,0,0,135,137,7,18,0,0,136,135,1,0,0,0,137,138,1,
		0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,131,1,0,0,0,
		140,141,1,0,0,0,141,18,1,0,0,0,142,144,5,36,0,0,143,145,7,20,0,0,144,143,
		1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,20,1,0,0,0,
		148,149,5,44,0,0,149,22,1,0,0,0,150,151,5,58,0,0,151,24,1,0,0,0,152,154,
		5,13,0,0,153,152,1,0,0,0,153,154,1,0,0,0,154,155,1,0,0,0,155,156,5,10,
		0,0,156,26,1,0,0,0,157,159,7,21,0,0,158,157,1,0,0,0,159,160,1,0,0,0,160,
		158,1,0,0,0,160,161,1,0,0,0,161,28,1,0,0,0,25,0,43,62,67,70,74,80,86,89,
		93,99,102,104,107,112,116,121,127,129,133,138,140,146,153,160,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
